#ifndef GRAPHICALWIDGET_H
#define GRAPHICALWIDGET_H

#include <QWidget>
#include <QPainter>
#include <QShortcut>
#include "consolemsg.h"
#include <QGraphicsLineItem>
#include <QGraphicsItem>

namespace Ui {
class GraphicalWidget;
}

struct dot {

    //dot(double ix, double iy){x=ix; y=iy;  }
    template  <class Type, class Type2> dot (Type ix, Type2 iy )
    {
        x=(double)ix;
        y=(double) (iy);

    }

    dot ()
    {
    x=0;
    y=0;
    }

    QString o() {return QString("x=%1 y=%2").arg(QString::number(x)).arg(QString::number(y));  }

            double x; double y;};

struct rectangleRecord { dot rt; dot lt; dot rb; dot lb; double S;};



class GraphicalWidget : public QWidget
{
    Q_OBJECT
    
public:
    explicit GraphicalWidget(QWidget *parent = 0);
    ~GraphicalWidget();
    void drawStuff ();

    void paintEvent(QPaintEvent *);

    void pregen();

    void generate ();

    void generateEllipse();

    bool belongsToEllipse (int x, int y);  //does it belong to ellipse border? 1 - yeah 0 - nope

    bool dotBelongsToRect (dot lt, dot rt, dot lb, dot rb);
    //1 - mean, that some point from dots belongs to the rectangular area
    //0 - means not



    void con (QString msg);
    void con1 (QString msg);


    void search(double iy);

    void supersearch();
    QTimer  * timer;

    bool saveAsImage();


    void transformToRingList();  //from ellipse list to the ring list, ready to be interpolized


    void interpolation();
    /* делает границу области непрерывной и по x и по y в дискрете 1 */


//searches for rightmost, leftmost, topmost, bottommost dots.
    /**they are used as the limiters while searching for the edges
     */
    void findExtremes();






    QGraphicsLineItem   * linesearchtr;
    QGraphicsLineItem   * linesearchtl;
    QGraphicsLineItem   * linesearchb;
    QGraphicsLineItem   * linesearchr;
    QGraphicsLineItem   * linesearchl;






     //beginning and ending of  the finding process
    double ytop, ybottom;





    //current y
    double y;



    QGraphicsScene  * scene;



    //cordinates of the extremes
    double  xleft;
    double xright;
    double ylow;
    double yhigh;

    //at the newer version - coordinates of the edge dots
    dot rightmost, leftmost, topmost, bottommost;







    //coeffs of the ellipse (at this version the area is an ellipse
    double a;
    double b;





    //border of the desired area
    QHash <int, double>  dots; //list generated by generateEllipse
    QList <dot> ringList;  //ring  list, out of which the figure is built
    QList <dot> dotslist; //missing y points interpolized



    int left, right;



    QList <rectangleRecord> records;


    //writing 'magic buttons' is an extremely bad habit

private slots:
    void on_pushButton_clicked();

    void on_scaleMinus_clicked();

    void on_scalePlus_clicked();

    void on_pushButton_2_clicked();


    void onTimerTicked();

private:
    Ui::GraphicalWidget *ui;
};

#endif // GRAPHICALWIDGET_H
